server:
  port: 8088
servlet:
  context-path: /
jdbcUrl: jdbc:mysql://localhost:3306/pet?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
spring:
  session:
    store-type: none
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/pet?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
    username: "root"
    password: "123456"
  mvc:
    view:
      prefix: /pages/
      suffix: .html
  redis:
    host: 127.0.0.1
    port: 6379
    password:
  kafka:
    bootstrap-servers: 127.0.0.1:9092
    producer:
      retries: 0 # 重试次数
      acks: 1 # 应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
      batch-size: 16384 # 批量大小
      buffer-memory: 33554432 # 生产端缓冲区大小
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      group-id: mentugroup # 默认的消费组ID
      enable-auto-commit: true # 是否自动提交offset
      auto-commit-interval: 100  # 提交offset延时(接收到消息后多久提交offset)
      # earliest:当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，从头开始消费
      # latest:当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，消费新产生的该分区下的数据
      # none:topic各分区都存在已提交的offset时，从offset后开始消费；只要有一个分区不存在已提交的offset，则抛出异常
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
testvalue: true
mybatis:
  #标注mybatis配置文件的位置
  #config-location: classpath:mybatis-config.xml
  #标注待解析的mapper的xml文件位置
  mapper-locations: classpath:mapper/*.xml
  #标注实体类位置
  type-aliases-package: com.cutty_pet.cutty_pet

xxl:
  job:
    accessToken: default_token
    admin:
      addresses: http://127.0.0.1:9090/xxl-job-admin
    executor:
      appname: cutty-pet
      address:
      ip:
      logpath: /Users/wanghao/Documents/tools/xxl-job/jobhandler
      port: 9999
      logretentiondays: 30

logging:
  level:
    org:
      apache:
        kafka: OFF